import { google } from "googleapis";
import fs from "fs";
import OpenAI from "openai";
import "dotenv/config";


const sleep = (ms) => new Promise(resolve => setTimeout(resolve, ms));


// üîë API –∫–ª—é—á GPT
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY, // –æ–±–æ–≤'—è–∑–∫–æ–≤–æ –∑—Ä–æ–±–∏ .env –∑ –∫–ª—é—á–µ–º
});


// –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ credentials
const auth = new google.auth.GoogleAuth({
  keyFile: "credentials.json",  // —à–ª—è—Ö –¥–æ —Ç–≤–æ—î–≥–æ —Ñ–∞–π–ª—É
  scopes: ["https://www.googleapis.com/auth/spreadsheets.readonly"],
});

const sheets = google.sheets({ version: "v4", auth });

const spreadsheetId = "1I4z67X3sQRrlYotiEuor_AXj--AmQg_GBL8aMASXmh8"; // –±–µ—Ä–µ –∑ URL Google Sheets
const range = "–ê—Ä–∫—É—à1!L2:M"; // –¥—ñ–∞–ø–∞–∑–æ–Ω, –¥–µ —É —Ç–µ–±–µ LongTags —ñ ShortTags

const fetchTags = async () => {
  const res = await sheets.spreadsheets.values.get({
    spreadsheetId,
    range,
  });
  //console.log("‚úÖ –ü–æ–≤–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ Google Sheets:", res.data); // <- –æ—Å—å —Ç—É—Ç
  const rows = res.data.values || [];
  //console.log("üìÑ –†—è–¥–∫–∏ –∑ —Ç–∞–±–ª–∏—Ü—ñ:", rows); // <- —Ç—É—Ç –±–∞—á–∏–º–æ –º–∞—Å–∏–≤ —Ä—è–¥–∫—ñ–≤
  return rows.map(row => ({
    longTags: row[0]?.split(",") || [],
    shortTags: row[1]?.split(",") || [],
  }));
};

// === —Ç–≤—ñ–π —ñ—Å–Ω—É—é—á–∏–π –∫–æ–¥ –≤–∏—â–µ (–æ—Ç—Ä–∏–º—É—î —Ç–µ–≥–∏) ===

// === GPT –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è ===
async function optimizeWithGPT(tags) {
  const prompt = `–¢–æ–±—ñ –Ω–∞–¥–∞–Ω–æ —Ç–µ–≥–∏ –¥–ª—è Etsy: ${tags.join(", ")}.

–ó–≥–µ–Ω–µ—Ä—É–π **2 –Ω–∞–±–æ—Ä–∏ –Ω–æ–≤–∏—Ö, —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∏—Ö —Ç–µ–≥—ñ–≤**, –ø–æ–∫—Ä–∞—â–µ–Ω–∏—Ö –¥–ª—è SEO:

1Ô∏è‚É£ LongTags (–¥–æ 13 —Ç–µ–≥—ñ–≤, –∫–æ–∂–µ–Ω –¥–æ 30 —Å–∏–º–≤–æ–ª—ñ–≤, –±—ñ–ª—å—à –¥–µ—Ç–∞–ª—å–Ω—ñ —Ç–∞ –ø—Ä–∏–≤–∞–±–ª–∏–≤—ñ)
2Ô∏è‚É£ ShortTags (–¥–æ 13 —Ç–µ–≥—ñ–≤, –∫–æ–∂–µ–Ω –¥–æ 20 —Å–∏–º–≤–æ–ª—ñ–≤, –∫–æ—Ä–æ—Ç–∫—ñ —ñ —á—ñ—Ç–∫—ñ)

–¢–µ–≥–∏ –ø–æ–≤–∏–Ω–Ω—ñ –±—É—Ç–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∏–º–∏, –º–æ–∂–ª–∏–≤–æ –∑–∞–º—ñ–Ω–∏—Ç–∏, –ø–æ–∫—Ä–∞—â–∏—Ç–∏, –¥–æ–¥–∞—Ç–∏ –ø–æ–ø—É–ª—è—Ä–Ω—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏.  
–í—ñ–¥–ø–æ–≤—ñ–¥—å —Å—Ç—Ä–æ–≥–æ —É —Ñ–æ—Ä–º–∞—Ç—ñ JSON –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω—å, –ø—Ä–∏–∫–ª–∞–¥:

{
  "longTags": ["long tag 1", "long tag 2", ...],
  "shortTags": ["short1", "short2", ...]
}
`;

  const response = await openai.chat.completions.create({
    model: "gpt-4o-mini",
    messages: [{ role: "user", content: prompt }],
  });

  let text = response.choices[0].message.content;

  text = text.replace(/```json|```/g, "").trim();

  try {
    const parsed = JSON.parse(text);
    return {
      longTags: parsed.longTags || [],
      shortTags: parsed.shortTags || [],
    };
  } catch (e) {
    console.error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø–∞—Ä—Å–∏—Ç–∏ JSON –≤—ñ–¥ GPT:", text);
    return { longTags: [], shortTags: [] };
  }
}


// –Ü–º—ñ—Ç–∞—Ü—ñ—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ª—ñ—Å—Ç–∏–Ω–≥—É
async function fakeUpdateListing(listingId, data) {
  console.log(`üíæ –õ—ñ—Å—Ç–∏–Ω–≥ ${listingId} –æ–Ω–æ–≤–ª–µ–Ω–æ –∑ –¥–∞–Ω–∏–º–∏:`, data);
  // –¢—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –º–∞–ª–µ–Ω—å–∫—É –∑–∞—Ç—Ä–∏–º–∫—É, —â–æ–± –±—É–ª–æ —Å—Ö–æ–∂–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω–∏–π –∞–ø–¥–µ–π—Ç
  await new Promise(resolve => setTimeout(resolve, 500));
}

/*async function run() {
const listings = await fetchTags(); // –º–∞—Å–∏–≤ [{ longTags: [...], shortTags: [...] }, ...]

if (listings.length === 0) {
    console.log("‚ùå –ù–µ–º–∞—î –ª—ñ—Å—Ç–∏–Ω–≥—ñ–≤ —É —Ç–∞–±–ª–∏—Ü—ñ");
    return;
  }

  // –±–µ—Ä–µ–º–æ —Ç—ñ–ª—å–∫–∏ –ø–µ—Ä—à–∏–π –ª—ñ—Å—Ç–∏–Ω–≥ –¥–ª—è —Ç–µ—Å—Ç—É
  const first = listings[0];
  console.log("\n–¢–µ—Å—Ç—É—î–º–æ –ø–µ—Ä—à–∏–π –ª—ñ—Å—Ç–∏–Ω–≥...");

  // –≤–∏–∫–ª–∏–∫ GPT –¥–ª—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó
  const optimized = await optimizeWithGPT([...first.longTags, ...first.shortTags]);

  console.log("‚ú® –û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω—ñ —Ç–µ–≥–∏ –≤—ñ–¥ GPT:", optimized);

  // —ñ–º—ñ—Ç—É—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
  await fakeUpdateListing(1, { tags: optimized });
  
}*/
async function runAll() {
  const listings = await fetchTags();

  if (listings.length === 0) {
    console.log("‚ùå –ù–µ–º–∞—î –ª—ñ—Å—Ç–∏–Ω–≥—ñ–≤ —É —Ç–∞–±–ª–∏—Ü—ñ");
    return;
  }

  for (let i = 0; i < listings.length; i++) {
    const listing = listings[i];
    console.log(`\nüîπ –û–±—Ä–æ–±–∫–∞ –ª—ñ—Å—Ç–∏–Ω–≥—É ${i + 1}...`);

    const optimized = await optimizeWithGPT([...listing.longTags, ...listing.shortTags]);

    console.log("‚ú® LongTags:", optimized.longTags);
    console.log("‚ú® ShortTags:", optimized.shortTags);

    // —ñ–º—ñ—Ç—É—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
    await fakeUpdateListing(i + 1, optimized);

    // —Å—Ç–∞–≤–∏–º–æ –∑–∞—Ç—Ä–∏–º–∫—É –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–∏–º –ª—ñ—Å—Ç–∏–Ω–≥–æ–º (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 1-2 —Å–µ–∫—É–Ω–¥–∏)
    await sleep(500);
  }

  console.log("\n‚úÖ –£—Å—ñ –ª—ñ—Å—Ç–∏–Ω–≥–∏ –æ–±—Ä–æ–±–ª–µ–Ω—ñ.");
}

//run();
runAll();

